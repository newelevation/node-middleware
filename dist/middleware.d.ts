export type MiddlewareHandler<Input = any, Output = any> = (input: Input, output?: Output) => Promise<Output>;
export type Next = (input: any, output: any) => Promise<any>;
export type UnamedMiddleware<Input = any> = (next: Next) => MiddlewareHandler<Input>;
export type NamedMiddleware = [string, UnamedMiddleware];
export type Middleware = UnamedMiddleware | NamedMiddleware;
export type InsertionPlacement = "before" | "after";
export type Insertion = [InsertionPlacement, name: string, UnamedMiddleware];
export type Pipeline<Input = any> = <Output>(insertions?: Insertion[]) => MiddlewareHandler<Input, Output>;
export declare const makePipeline: <Input>(use?: Middleware[]) => Pipeline<Input>;
export declare const passOutputAlong: Next;
